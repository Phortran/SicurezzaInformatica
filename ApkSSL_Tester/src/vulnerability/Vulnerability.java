package vulnerability;

//import reachability.myreachability.ReachabilityTag;
import security.Inspector;
import security.SafetySquad;
import utils.Suspect;

public abstract class Vulnerability {
	protected Suspect suspect;
	protected String type;
	protected Status status;
	
	//FIXME vedere se aggiungere altri
	protected enum Status {VULNERABLE, POTENTIAL, NOT_VULNERABLE};
	
	public Vulnerability (Suspect suspect) {
		this.suspect = suspect;
	}
	
	public boolean proceedInspection() {
		Inspector inspector = new Inspector();
		return inspect(inspector);
	}
	
	public Suspect getSuspect() {
		return this.suspect;
	}
	
	@Override
	public String toString() {
		String cr = System.lineSeparator();
		String res = "@class "
				+ this.suspect.getsClass().toString()
				+ cr + " @method "
				+ this.suspect.getsMethod().toString()
				+ cr
				+ " --> " + this.type
				+ ": " + this.status
				+ cr;
		return res;
	}
	
	protected void setStatus(boolean inspectorResult) {
		if (inspectorResult) {
			//new code
			this.status = Status.VULNERABLE;
			
			/*ReachabilityTag rTag = (ReachabilityTag) suspect.getsMethod()
					.getTag(ReachabilityTag.NAME);
			if (rTag == null)
				this.status = Status.POTENTIAL;
			else
				this.status = Status.VULNERABLE;*/
		} else {
			this.status = Status.NOT_VULNERABLE;
		}
	}
	
	/**
	 * FIXME il risultato dell'ispettore può anche essere un oggetto più dettagliato
	 * 
	 * @param abstInspector
	 * @return
	 */
	abstract public boolean inspect(SafetySquad inspector);

}