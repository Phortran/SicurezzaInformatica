public final class com.google.android.gms.dynamic.c extends com.google.android.gms.dynamic.b$a
{
    private final java.lang.Object a;

    private void <init>(java.lang.Object)
    {
        com.google.android.gms.dynamic.c $r0;
        java.lang.Object $r1;

        $r0 := @this: com.google.android.gms.dynamic.c;
        $r1 := @parameter0: java.lang.Object;
        specialinvoke $r0.<com.google.android.gms.dynamic.b$a: void <init>()>();
        $r0.<com.google.android.gms.dynamic.c: java.lang.Object a> = $r1;
        return;
    }

    public static com.google.android.gms.dynamic.b a(java.lang.Object)
    {
        java.lang.Object $r0;
        com.google.android.gms.dynamic.c $r1;

        $r0 := @parameter0: java.lang.Object;
        $r1 = new com.google.android.gms.dynamic.c;
        specialinvoke $r1.<com.google.android.gms.dynamic.c: void <init>(java.lang.Object)>($r0);
        return $r1;
    }

    public static java.lang.Object a(com.google.android.gms.dynamic.b)
    {
        com.google.android.gms.dynamic.b $r0;
        boolean $z0;
        java.lang.Class $r1;
        int $i0, i1;
        android.os.IBinder $r2;
        com.google.android.gms.dynamic.c $r3;
        java.lang.Object $r4;
        java.lang.reflect.Field[] $r5;
        java.lang.reflect.Field $r6;
        java.lang.NullPointerException $r7;
        java.lang.IllegalArgumentException $r8, $r10;
        java.lang.IllegalAccessException $r11;

        $r0 := @parameter0: com.google.android.gms.dynamic.b;
        $z0 = $r0 instanceof com.google.android.gms.dynamic.c;
        if $z0 == 0 goto label0;

        $r3 = (com.google.android.gms.dynamic.c) $r0;
        $r4 = $r3.<com.google.android.gms.dynamic.c: java.lang.Object a>;
        return $r4;

     label0:
        $r2 = interfaceinvoke $r0.<com.google.android.gms.dynamic.b: android.os.IBinder asBinder()>();
        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();
        $i0 = lengthof $r5;
        i1 = (int) 1;
        if $i0 != i1 goto label7;

        $r6 = $r5[0];
        $z0 = virtualinvoke $r6.<java.lang.reflect.Field: boolean isAccessible()>();
        if $z0 != 0 goto label6;

        virtualinvoke $r6.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label1:
        $r4 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r2);

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;
        $r8 = new java.lang.IllegalArgumentException;
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Binder object is null.", $r7);
        throw $r8;

     label4:
        $r8 := @caughtexception;
        $r10 = new java.lang.IllegalArgumentException;
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("remoteBinder is the wrong class.", $r8);
        throw $r10;

     label5:
        $r11 := @caughtexception;
        $r10 = new java.lang.IllegalArgumentException;
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Could not access the field in remoteBinder.", $r11);
        throw $r10;

     label6:
        $r10 = new java.lang.IllegalArgumentException;
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The concrete class implementing IObjectWrapper must have exactly one declared *private* field for the wrapped object. Preferably, this is an instance of the ObjectWrapper<T> class.");
        throw $r10;

     label7:
        $r10 = new java.lang.IllegalArgumentException;
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The concrete class implementing IObjectWrapper must have exactly *one* declared private field for the wrapped object.  Preferably, this is an instance of the ObjectWrapper<T> class.");
        throw $r10;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label1 to label2 with label5;
    }
}
