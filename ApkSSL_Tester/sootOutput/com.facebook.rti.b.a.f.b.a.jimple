public final class com.facebook.rti.b.a.f.b.a extends java.lang.Object
{
    private final javax.net.ssl.HostnameVerifier a;

    public void <init>(javax.net.ssl.HostnameVerifier)
    {
        com.facebook.rti.b.a.f.b.a $r0;
        javax.net.ssl.HostnameVerifier $r1;

        $r0 := @this: com.facebook.rti.b.a.f.b.a;
        $r1 := @parameter0: javax.net.ssl.HostnameVerifier;
        specialinvoke $r0.<java.lang.Object: void <init>()>();
        $r0.<com.facebook.rti.b.a.f.b.a: javax.net.ssl.HostnameVerifier a> = $r1;
        return;
    }

    private static java.lang.String a(javax.net.ssl.SSLSession)
    {
        javax.net.ssl.SSLSession $r0;
        java.security.cert.Certificate[] $r1;
        int $i0;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        java.security.cert.Certificate $r5;
        java.lang.String $r6;
        javax.net.ssl.SSLException $r7;
        java.lang.StringBuilder $r8;

        $r0 := @parameter0: javax.net.ssl.SSLSession;

     label0:
        $r1 = interfaceinvoke $r0.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>();
        if $r1 == null goto label2;

        $i0 = lengthof $r1;
        if $i0 <= 0 goto label2;

        $r3 = newarray (java.lang.Object)[2];
        $i0 = lengthof $r1;
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
        $r3[0] = $r4;
        $r5 = $r1[0];
        $r6 = virtualinvoke $r5.<java.security.cert.Certificate: java.lang.String toString()>();
        $r3[1] = $r6;
        $r6 = staticinvoke <com.facebook.rti.a.h.a: java.lang.String a(java.lang.String,java.lang.Object[])>("num: %d, %s", $r3);

     label1:
        return $r6;

     label2:
        return "No certificates";

     label3:
        $r7 := @caughtexception;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Exception getting certificates ");
        $r6 = virtualinvoke $r7.<javax.net.ssl.SSLException: java.lang.String toString()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;

        catch javax.net.ssl.SSLException from label0 to label1 with label3;
    }

    private static void a(javax.net.ssl.SSLSession, javax.net.ssl.SSLSocket, java.lang.String)
    {
        javax.net.ssl.SSLSession $r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String $r2, $r5, $r6;
        javax.net.ssl.SSLException $r3;
        java.lang.Object[] $r4;
        boolean $z0;
        java.net.InetAddress $r7;

        $r0 := @parameter0: javax.net.ssl.SSLSession;
        $r1 := @parameter1: javax.net.ssl.SSLSocket;
        $r2 := @parameter2: java.lang.String;
        if $r0 != null goto label0;

        $r3 = new javax.net.ssl.SSLException;
        specialinvoke $r3.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("SSL Session is null");
        throw $r3;

     label0:
        $r5 = interfaceinvoke $r0.<javax.net.ssl.SSLSession: java.lang.String getCipherSuite()>();
        $r6 = "SSL_NULL_WITH_NULL_NULL";
        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);
        if $z0 == 0 goto label11;

        $r4 = newarray (java.lang.Object)[7];
        $z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isClosed()>();
        if $z0 == 0 goto label6;

        $r5 = "closed";

     label1:
        $r4[0] = $r5;
        $z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isConnected()>();
        if $z0 == 0 goto label7;

        $r5 = "connected";

     label2:
        $r4[1] = $r5;
        $z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isBound()>();
        if $z0 == 0 goto label8;

        $r5 = "bound";

     label3:
        $r4[2] = $r5;
        $z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isInputShutdown()>();
        if $z0 == 0 goto label9;

        $r5 = "input_shutdown";

     label4:
        $r4[3] = $r5;
        $z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isOutputShutdown()>();
        if $z0 == 0 goto label10;

        $r5 = "output_shutdown";

     label5:
        $r4[4] = $r5;
        $r4[5] = $r2;
        $r7 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.net.InetAddress getInetAddress()>();
        $r5 = virtualinvoke $r7.<java.net.InetAddress: java.lang.String toString()>();
        $r4[6] = $r5;
        $r6 = staticinvoke <com.facebook.rti.a.h.a: java.lang.String a(java.lang.String,java.lang.Object[])>("SSL handshake returned an invalid session. Socket state (%s, %s, %s, %s, %s, %s%s)", $r4);
        $r3 = new javax.net.ssl.SSLException;
        specialinvoke $r3.<javax.net.ssl.SSLException: void <init>(java.lang.String)>($r6);
        throw $r3;

     label6:
        $r5 = "open";
        goto label1;

     label7:
        $r5 = "disconnected";
        goto label2;

     label8:
        $r5 = "unbound";
        goto label3;

     label9:
        $r5 = "input_open";
        goto label4;

     label10:
        $r5 = "output_open";
        goto label5;

     label11:
        return;
    }

    public final void a(javax.net.ssl.SSLSocket, java.lang.String)
    {
        com.facebook.rti.b.a.f.b.a $r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String $r2, $r5;
        javax.net.ssl.SSLSession $r3;
        javax.net.ssl.HostnameVerifier $r4;
        java.net.InetAddress $r6;
        boolean $z0;
        javax.net.ssl.SSLException $r7;
        java.lang.Object[] $r8;

        $r0 := @this: com.facebook.rti.b.a.f.b.a;
        $r1 := @parameter0: javax.net.ssl.SSLSocket;
        $r2 := @parameter1: java.lang.String;
        $r3 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();
        staticinvoke <com.facebook.rti.b.a.f.b.a: void a(javax.net.ssl.SSLSession,javax.net.ssl.SSLSocket,java.lang.String)>($r3, $r1, $r2);
        $r4 = $r0.<com.facebook.rti.b.a.f.b.a: javax.net.ssl.HostnameVerifier a>;
        $z0 = interfaceinvoke $r4.<javax.net.ssl.HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>($r2, $r3);
        if $z0 != 0 goto label0;

        $r7 = new javax.net.ssl.SSLException;
        $r8 = newarray (java.lang.Object)[3];
        $r8[0] = $r2;
        $r6 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.net.InetAddress getInetAddress()>();
        $r2 = virtualinvoke $r6.<java.net.InetAddress: java.lang.String toString()>();
        $r8[1] = $r2;
        $r2 = staticinvoke <com.facebook.rti.b.a.f.b.a: java.lang.String a(javax.net.ssl.SSLSession)>($r3);
        $r8[2] = $r2;
        $r5 = staticinvoke <com.facebook.rti.a.h.a: java.lang.String a(java.lang.String,java.lang.Object[])>("could not verify hostname for (%s, %s). (%s)", $r8);
        specialinvoke $r7.<javax.net.ssl.SSLException: void <init>(java.lang.String)>($r5);
        throw $r7;

     label0:
        return;
    }
}
