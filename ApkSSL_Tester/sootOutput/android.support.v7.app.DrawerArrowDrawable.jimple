abstract class android.support.v7.app.DrawerArrowDrawable extends android.graphics.drawable.Drawable
{
    private static final float ARROW_HEAD_ANGLE;
    private final float mBarGap;
    private final float mBarSize;
    private final float mBarThickness;
    private float mCenterOffset;
    private float mMaxCutForBarSize;
    private final float mMiddleArrowSize;
    private final android.graphics.Paint mPaint;
    private final android.graphics.Path mPath;
    private float mProgress;
    private final int mSize;
    private final boolean mSpin;
    private final float mTopBottomArrowSize;
    private boolean mVerticalMirror;

    static void <clinit>()
    {
        double $d0;
        float $f0;

        $d0 = staticinvoke <java.lang.Math: double toRadians(double)>(45.0);
        $f0 = (float) $d0;
        <android.support.v7.app.DrawerArrowDrawable: float ARROW_HEAD_ANGLE> = $f0;
        return;
    }

    void <init>(android.content.Context)
    {
        android.support.v7.app.DrawerArrowDrawable $r0;
        android.content.Context $r1;
        int $i0, $i1;
        android.content.res.TypedArray $r2;
        android.graphics.Paint $r3;
        int[] $r4;
        float $f0, $f2, $f3;
        boolean $z1;
        android.content.res.Resources$Theme $r5;
        android.graphics.Path $r6;
        double $d0, $d1, $d2;
        android.graphics.Paint$Style $r7;
        android.graphics.Paint$Join $r8;
        android.graphics.Paint$Cap $r9;

        $r0 := @this: android.support.v7.app.DrawerArrowDrawable;
        $r1 := @parameter0: android.content.Context;
        specialinvoke $r0.<android.graphics.drawable.Drawable: void <init>()>();
        $r3 = new android.graphics.Paint;
        specialinvoke $r3.<android.graphics.Paint: void <init>()>();
        $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Paint mPaint> = $r3;
        $r6 = new android.graphics.Path;
        specialinvoke $r6.<android.graphics.Path: void <init>()>();
        $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Path mPath> = $r6;
        $r0.<android.support.v7.app.DrawerArrowDrawable: boolean mVerticalMirror> = 0;
        $r5 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources$Theme getTheme()>();
        $r4 = <android.support.v7.appcompat.R$styleable: int[] DrawerArrowToggle>;
        $i0 = <android.support.v7.appcompat.R$attr: int drawerArrowStyle>;
        $i1 = <android.support.v7.appcompat.R$style: int Base_Widget_AppCompat_DrawerArrowToggle>;
        $r2 = virtualinvoke $r5.<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(null, $r4, $i0, $i1);
        $r3 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Paint mPaint>;
        virtualinvoke $r3.<android.graphics.Paint: void setAntiAlias(boolean)>(1);
        $r3 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Paint mPaint>;
        $i1 = <android.support.v7.appcompat.R$styleable: int DrawerArrowToggle_color>;
        $i0 = (int) 0;
        $i1 = virtualinvoke $r2.<android.content.res.TypedArray: int getColor(int,int)>($i1, $i0);
        virtualinvoke $r3.<android.graphics.Paint: void setColor(int)>($i1);
        $i1 = <android.support.v7.appcompat.R$styleable: int DrawerArrowToggle_drawableSize>;
        $i0 = (int) 0;
        $i1 = virtualinvoke $r2.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i1, $i0);
        $r0.<android.support.v7.app.DrawerArrowDrawable: int mSize> = $i1;
        $i1 = <android.support.v7.appcompat.R$styleable: int DrawerArrowToggle_barSize>;
        $f2 = virtualinvoke $r2.<android.content.res.TypedArray: float getDimension(int,float)>($i1, 0.0F);
        $i1 = staticinvoke <java.lang.Math: int round(float)>($f2);
        $f2 = (float) $i1;
        $r0.<android.support.v7.app.DrawerArrowDrawable: float mBarSize> = $f2;
        $i1 = <android.support.v7.appcompat.R$styleable: int DrawerArrowToggle_topBottomBarArrowSize>;
        $f2 = virtualinvoke $r2.<android.content.res.TypedArray: float getDimension(int,float)>($i1, 0.0F);
        $i1 = staticinvoke <java.lang.Math: int round(float)>($f2);
        $f2 = (float) $i1;
        $r0.<android.support.v7.app.DrawerArrowDrawable: float mTopBottomArrowSize> = $f2;
        $i1 = <android.support.v7.appcompat.R$styleable: int DrawerArrowToggle_thickness>;
        $f2 = virtualinvoke $r2.<android.content.res.TypedArray: float getDimension(int,float)>($i1, 0.0F);
        $r0.<android.support.v7.app.DrawerArrowDrawable: float mBarThickness> = $f2;
        $i1 = <android.support.v7.appcompat.R$styleable: int DrawerArrowToggle_gapBetweenBars>;
        $f2 = virtualinvoke $r2.<android.content.res.TypedArray: float getDimension(int,float)>($i1, 0.0F);
        $i1 = staticinvoke <java.lang.Math: int round(float)>($f2);
        $f2 = (float) $i1;
        $r0.<android.support.v7.app.DrawerArrowDrawable: float mBarGap> = $f2;
        $i1 = <android.support.v7.appcompat.R$styleable: int DrawerArrowToggle_spinBars>;
        $z1 = virtualinvoke $r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i1, 1);
        $r0.<android.support.v7.app.DrawerArrowDrawable: boolean mSpin> = $z1;
        $i1 = <android.support.v7.appcompat.R$styleable: int DrawerArrowToggle_middleBarArrowSize>;
        $f2 = virtualinvoke $r2.<android.content.res.TypedArray: float getDimension(int,float)>($i1, 0.0F);
        $r0.<android.support.v7.app.DrawerArrowDrawable: float mMiddleArrowSize> = $f2;
        $i1 = $r0.<android.support.v7.app.DrawerArrowDrawable: int mSize>;
        $f2 = (float) $i1;
        $f0 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mBarThickness>;
        $f3 = $f0 * 3.0F;
        $f3 = $f2 - $f3;
        $f2 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mBarGap>;
        $f2 = $f2 * 2.0F;
        $f3 = $f3 - $f2;
        $i0 = (int) $f3;
        $i1 = $i0 / 4;
        $i1 = $i1 * 2;
        $f3 = (float) $i1;
        $r0.<android.support.v7.app.DrawerArrowDrawable: float mCenterOffset> = $f3;
        $f3 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mCenterOffset>;
        $d0 = (double) $f3;
        $f3 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mBarThickness>;
        $d1 = (double) $f3;
        $d2 = $d1 * 1.5;
        $f3 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mBarGap>;
        $d1 = (double) $f3;
        $d2 = $d2 + $d1;
        $d2 = $d0 + $d2;
        $f3 = (float) $d2;
        $r0.<android.support.v7.app.DrawerArrowDrawable: float mCenterOffset> = $f3;
        virtualinvoke $r2.<android.content.res.TypedArray: void recycle()>();
        $r3 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Paint mPaint>;
        $r7 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;
        virtualinvoke $r3.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r7);
        $r3 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Paint mPaint>;
        $r8 = <android.graphics.Paint$Join: android.graphics.Paint$Join MITER>;
        virtualinvoke $r3.<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)>($r8);
        $r3 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Paint mPaint>;
        $r9 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap BUTT>;
        virtualinvoke $r3.<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>($r9);
        $r3 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Paint mPaint>;
        $f3 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mBarThickness>;
        virtualinvoke $r3.<android.graphics.Paint: void setStrokeWidth(float)>($f3);
        $f3 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mBarThickness>;
        $f3 = $f3 / 2.0F;
        $d2 = (double) $f3;
        $f3 = <android.support.v7.app.DrawerArrowDrawable: float ARROW_HEAD_ANGLE>;
        $d1 = (double) $f3;
        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d1);
        $d2 = $d2 * $d1;
        $f3 = (float) $d2;
        $r0.<android.support.v7.app.DrawerArrowDrawable: float mMaxCutForBarSize> = $f3;
        return;
    }

    private static float lerp(float, float, float)
    {
        float $f0, $f1, $f2;

        $f0 := @parameter0: float;
        $f1 := @parameter1: float;
        $f2 := @parameter2: float;
        $f1 = $f1 - $f0;
        $f2 = $f1 * $f2;
        $f2 = $f2 + $f0;
        return $f2;
    }

    public void draw(android.graphics.Canvas)
    {
        android.support.v7.app.DrawerArrowDrawable $r0;
        android.graphics.Canvas $r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        android.graphics.Rect $r3;
        boolean $z0, $z1;
        double $d0, $d1;
        int $i0;
        long $l1;
        android.graphics.Path $r4;
        byte $b2;
        android.graphics.Paint $r6;

        $r0 := @this: android.support.v7.app.DrawerArrowDrawable;
        $r1 := @parameter0: android.graphics.Canvas;
        $r3 = virtualinvoke $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Rect getBounds()>();
        $z0 = virtualinvoke $r0.<android.support.v7.app.DrawerArrowDrawable: boolean isLayoutRtl()>();
        $f6 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mBarSize>;
        $f5 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mTopBottomArrowSize>;
        $f4 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mProgress>;
        $f1 = staticinvoke <android.support.v7.app.DrawerArrowDrawable: float lerp(float,float,float)>($f6, $f5, $f4);
        $f6 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mBarSize>;
        $f5 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mMiddleArrowSize>;
        $f4 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mProgress>;
        $f5 = staticinvoke <android.support.v7.app.DrawerArrowDrawable: float lerp(float,float,float)>($f6, $f5, $f4);
        $f4 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mMaxCutForBarSize>;
        $f3 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mProgress>;
        $f6 = staticinvoke <android.support.v7.app.DrawerArrowDrawable: float lerp(float,float,float)>(0.0F, $f4, $f3);
        $i0 = staticinvoke <java.lang.Math: int round(float)>($f6);
        $f4 = (float) $i0;
        $f3 = <android.support.v7.app.DrawerArrowDrawable: float ARROW_HEAD_ANGLE>;
        $f2 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mProgress>;
        $f0 = staticinvoke <android.support.v7.app.DrawerArrowDrawable: float lerp(float,float,float)>(0.0F, $f3, $f2);
        if $z0 == 0 goto label4;

        $f6 = 0.0F;

     label0:
        if $z0 == 0 goto label5;

        $f3 = 180.0F;

     label1:
        $f2 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mProgress>;
        $f3 = staticinvoke <android.support.v7.app.DrawerArrowDrawable: float lerp(float,float,float)>($f6, $f3, $f2);
        $d1 = (double) $f1;
        $d0 = (double) $f0;
        $d0 = staticinvoke <java.lang.Math: double cos(double)>($d0);
        $d1 = $d1 * $d0;
        $l1 = staticinvoke <java.lang.Math: long round(double)>($d1);
        $f2 = (float) $l1;
        $d1 = (double) $f1;
        $d0 = (double) $f0;
        $d0 = staticinvoke <java.lang.Math: double sin(double)>($d0);
        $d1 = $d1 * $d0;
        $l1 = staticinvoke <java.lang.Math: long round(double)>($d1);
        $f1 = (float) $l1;
        $r4 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Path mPath>;
        virtualinvoke $r4.<android.graphics.Path: void rewind()>();
        $f6 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mBarGap>;
        $f0 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mBarThickness>;
        $f6 = $f6 + $f0;
        $f0 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mMaxCutForBarSize>;
        $f0 = neg $f0;
        $f7 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mProgress>;
        $f6 = staticinvoke <android.support.v7.app.DrawerArrowDrawable: float lerp(float,float,float)>($f6, $f0, $f7);
        $f7 = neg $f5;
        $f0 = $f7 / 2.0F;
        $r4 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Path mPath>;
        $f7 = $f0 + $f4;
        virtualinvoke $r4.<android.graphics.Path: void moveTo(float,float)>($f7, 0.0F);
        $r4 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Path mPath>;
        $f8 = 2.0F * $f4;
        $f8 = $f5 - $f8;
        virtualinvoke $r4.<android.graphics.Path: void rLineTo(float,float)>($f8, 0.0F);
        $r4 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Path mPath>;
        virtualinvoke $r4.<android.graphics.Path: void moveTo(float,float)>($f0, $f6);
        $r4 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Path mPath>;
        virtualinvoke $r4.<android.graphics.Path: void rLineTo(float,float)>($f2, $f1);
        $r4 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Path mPath>;
        $f8 = neg $f6;
        virtualinvoke $r4.<android.graphics.Path: void moveTo(float,float)>($f0, $f8);
        $r4 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Path mPath>;
        $f8 = neg $f1;
        virtualinvoke $r4.<android.graphics.Path: void rLineTo(float,float)>($f2, $f8);
        $r4 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Path mPath>;
        virtualinvoke $r4.<android.graphics.Path: void close()>();
        virtualinvoke $r1.<android.graphics.Canvas: int save()>();
        $i0 = virtualinvoke $r3.<android.graphics.Rect: int centerX()>();
        $f8 = (float) $i0;
        $f7 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mCenterOffset>;
        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f8, $f7);
        $z1 = $r0.<android.support.v7.app.DrawerArrowDrawable: boolean mSpin>;
        if $z1 == 0 goto label7;

        $z1 = $r0.<android.support.v7.app.DrawerArrowDrawable: boolean mVerticalMirror>;
        $z1 = $z1 ^ $z0;
        if $z1 == 0 goto label6;

        $b2 = -1;

     label2:
        $f8 = (float) $b2;
        $f8 = $f8 * $f3;
        virtualinvoke $r1.<android.graphics.Canvas: void rotate(float)>($f8);

     label3:
        $r4 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Path mPath>;
        $r6 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Paint mPaint>;
        virtualinvoke $r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r4, $r6);
        virtualinvoke $r1.<android.graphics.Canvas: void restore()>();
        return;

     label4:
        $f6 = -180.0F;
        goto label0;

     label5:
        $f3 = 0.0F;
        goto label1;

     label6:
        $b2 = 1;
        goto label2;

     label7:
        if $z0 == 0 goto label3;

        virtualinvoke $r1.<android.graphics.Canvas: void rotate(float)>(180.0F);
        goto label3;
    }

    public int getIntrinsicHeight()
    {
        android.support.v7.app.DrawerArrowDrawable $r0;
        int $i0;

        $r0 := @this: android.support.v7.app.DrawerArrowDrawable;
        $i0 = $r0.<android.support.v7.app.DrawerArrowDrawable: int mSize>;
        return $i0;
    }

    public int getIntrinsicWidth()
    {
        android.support.v7.app.DrawerArrowDrawable $r0;
        int $i0;

        $r0 := @this: android.support.v7.app.DrawerArrowDrawable;
        $i0 = $r0.<android.support.v7.app.DrawerArrowDrawable: int mSize>;
        return $i0;
    }

    public int getOpacity()
    {
        android.support.v7.app.DrawerArrowDrawable $r0;

        $r0 := @this: android.support.v7.app.DrawerArrowDrawable;
        return -3;
    }

    public float getProgress()
    {
        android.support.v7.app.DrawerArrowDrawable $r0;
        float $f0;

        $r0 := @this: android.support.v7.app.DrawerArrowDrawable;
        $f0 = $r0.<android.support.v7.app.DrawerArrowDrawable: float mProgress>;
        return $f0;
    }

    public boolean isAutoMirrored()
    {
        android.support.v7.app.DrawerArrowDrawable $r0;

        $r0 := @this: android.support.v7.app.DrawerArrowDrawable;
        return 1;
    }

    abstract boolean isLayoutRtl();

    public void setAlpha(int)
    {
        android.support.v7.app.DrawerArrowDrawable $r0;
        int $i0;
        android.graphics.Paint $r1;

        $r0 := @this: android.support.v7.app.DrawerArrowDrawable;
        $i0 := @parameter0: int;
        $r1 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Paint mPaint>;
        virtualinvoke $r1.<android.graphics.Paint: void setAlpha(int)>($i0);
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.support.v7.app.DrawerArrowDrawable $r0;
        android.graphics.ColorFilter $r1;
        android.graphics.Paint $r2;

        $r0 := @this: android.support.v7.app.DrawerArrowDrawable;
        $r1 := @parameter0: android.graphics.ColorFilter;
        $r2 = $r0.<android.support.v7.app.DrawerArrowDrawable: android.graphics.Paint mPaint>;
        virtualinvoke $r2.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>($r1);
        return;
    }

    public void setProgress(float)
    {
        android.support.v7.app.DrawerArrowDrawable $r0;
        float $f0;

        $r0 := @this: android.support.v7.app.DrawerArrowDrawable;
        $f0 := @parameter0: float;
        $r0.<android.support.v7.app.DrawerArrowDrawable: float mProgress> = $f0;
        virtualinvoke $r0.<android.support.v7.app.DrawerArrowDrawable: void invalidateSelf()>();
        return;
    }

    protected void setVerticalMirror(boolean)
    {
        android.support.v7.app.DrawerArrowDrawable $r0;
        boolean $z0;

        $r0 := @this: android.support.v7.app.DrawerArrowDrawable;
        $z0 := @parameter0: boolean;
        $r0.<android.support.v7.app.DrawerArrowDrawable: boolean mVerticalMirror> = $z0;
        return;
    }
}
