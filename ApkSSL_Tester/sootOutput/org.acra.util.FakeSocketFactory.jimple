public class org.acra.util.FakeSocketFactory extends java.lang.Object implements org.apache.http.conn.scheme.LayeredSocketFactory, org.apache.http.conn.scheme.SocketFactory
{
    private javax.net.ssl.SSLContext sslcontext;

    public void <init>()
    {
        org.acra.util.FakeSocketFactory $r0;

        $r0 := @this: org.acra.util.FakeSocketFactory;
        specialinvoke $r0.<java.lang.Object: void <init>()>();
        $r0.<org.acra.util.FakeSocketFactory: javax.net.ssl.SSLContext sslcontext> = null;
        return;
    }

    private static javax.net.ssl.SSLContext createEasySSLContext()
    {
        java.lang.String $r0;
        org.acra.util.NaiveTrustManager $r1;
        javax.net.ssl.SSLContext $r2;
        javax.net.ssl.TrustManager[] $r4;
        java.lang.Exception $r5;
        java.io.IOException $r6;

     label0:
        $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");
        $r4 = newarray (javax.net.ssl.TrustManager)[1];
        $r1 = new org.acra.util.NaiveTrustManager;
        specialinvoke $r1.<org.acra.util.NaiveTrustManager: void <init>()>();
        $r4[0] = $r1;
        virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, $r4, null);

     label1:
        return $r2;

     label2:
        $r5 := @caughtexception;
        $r6 = new java.io.IOException;
        $r0 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r0);
        throw $r6;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    private javax.net.ssl.SSLContext getSSLContext()
    {
        org.acra.util.FakeSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;

        $r0 := @this: org.acra.util.FakeSocketFactory;
        $r1 = $r0.<org.acra.util.FakeSocketFactory: javax.net.ssl.SSLContext sslcontext>;
        if $r1 != null goto label0;

        $r1 = staticinvoke <org.acra.util.FakeSocketFactory: javax.net.ssl.SSLContext createEasySSLContext()>();
        $r0.<org.acra.util.FakeSocketFactory: javax.net.ssl.SSLContext sslcontext> = $r1;

     label0:
        $r1 = $r0.<org.acra.util.FakeSocketFactory: javax.net.ssl.SSLContext sslcontext>;
        return $r1;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams)
    {
        org.acra.util.FakeSocketFactory $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0, $i1, $i2, $i3;
        java.net.InetAddress $r3;
        org.apache.http.params.HttpParams $r4;
        java.net.InetSocketAddress $r5, $r6;
        javax.net.ssl.SSLSocket $r7;

        $r0 := @this: org.acra.util.FakeSocketFactory;
        $r1 := @parameter0: java.net.Socket;
        $r2 := @parameter1: java.lang.String;
        $i0 := @parameter2: int;
        $r3 := @parameter3: java.net.InetAddress;
        $i1 := @parameter4: int;
        $r4 := @parameter5: org.apache.http.params.HttpParams;
        $i2 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>($r4);
        $i3 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>($r4);
        $r5 = new java.net.InetSocketAddress;
        specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r2, $i0);
        if $r1 == null goto label4;

     label0:
        $r7 = (javax.net.ssl.SSLSocket) $r1;
        if $r3 != null goto label1;

        if $i1 <= 0 goto label3;

     label1:
        if $i1 >= 0 goto label2;

        $i1 = 0;

     label2:
        $r6 = new java.net.InetSocketAddress;
        specialinvoke $r6.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r3, $i1);
        virtualinvoke $r7.<javax.net.ssl.SSLSocket: void bind(java.net.SocketAddress)>($r6);

     label3:
        virtualinvoke $r7.<javax.net.ssl.SSLSocket: void connect(java.net.SocketAddress,int)>($r5, $i2);
        virtualinvoke $r7.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>($i3);
        return $r7;

     label4:
        $r1 = virtualinvoke $r0.<org.acra.util.FakeSocketFactory: java.net.Socket createSocket()>();
        goto label0;
    }

    public java.net.Socket createSocket()
    {
        org.acra.util.FakeSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;
        javax.net.ssl.SSLSocketFactory $r2;
        java.net.Socket $r3;

        $r0 := @this: org.acra.util.FakeSocketFactory;
        $r1 = specialinvoke $r0.<org.acra.util.FakeSocketFactory: javax.net.ssl.SSLContext getSSLContext()>();
        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();
        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();
        return $r3;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean)
    {
        org.acra.util.FakeSocketFactory $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;
        javax.net.ssl.SSLContext $r3;
        javax.net.ssl.SSLSocketFactory $r4;

        $r0 := @this: org.acra.util.FakeSocketFactory;
        $r1 := @parameter0: java.net.Socket;
        $r2 := @parameter1: java.lang.String;
        $i0 := @parameter2: int;
        $z0 := @parameter3: boolean;
        $r3 = specialinvoke $r0.<org.acra.util.FakeSocketFactory: javax.net.ssl.SSLContext getSSLContext()>();
        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();
        $r1 = virtualinvoke $r4.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r1, $r2, $i0, $z0);
        return $r1;
    }

    public boolean isSecure(java.net.Socket)
    {
        org.acra.util.FakeSocketFactory $r0;
        java.net.Socket $r1;

        $r0 := @this: org.acra.util.FakeSocketFactory;
        $r1 := @parameter0: java.net.Socket;
        return 1;
    }
}
